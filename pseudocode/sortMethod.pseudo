//BaseCode
algorithm sortMethod(A, n) // A is an array of size n
{
	array cpy[1..n] // Create new integer array
	for i := 1 to n do
	    cpy[i] := list[i]; // Copy the original array
	    
	mergeSort(cpy, n); // Invoke margesort function
	                    
	product[1] := cpy[n - 1] * cpy[n - 2];
	product[2] := cpy[1] * cpy[2];
	
	if product[1] > product[2] then
	        result := cpy[n] * product[1]
	    else
	        result := cpy[n] * product[2];
	
	return result;
}

algorithm mergeSort(list, n) // List is an array of size n
{
	mergeSortRec(list, 1, n);
}

algorithm mergeSortRec(list, start, end) // Take the array, start ,end 
{
	integer mid;
	
	if finish <= start then
	   return;
	
	mid := (start + end) / 2; 
	mergeSortRec(list, start, mid); // Sort left side recursively
	mergeSortRec(list, mid + 1, end); // Sort right side recursively 
	merge(list, start, finish); // Merge two sides
}

algorithm merge(list, start, end) // Take the array, start ,end 
{
	mid := (start + end) / 2; 
	n := end - start + 1;
	array mrg_list[1..n];
	ptr[1] := start;
	ptr[2] := mid + 1;
	for i := 1 to n do {
	    if list[ptr[1]] < list[ptr[2]] then {
	        mrg_list[i] := list[ptr[1]++];
	        if ptr[1] > mid then {
	            while ptr[2] <= end do {
	                mrg_list[++i] := list[ptr[2]++];
	            }
	        }
	    }
	}
	else {
	    mrg_list[i] := list[ptr[2]++];
	    if ptr[2] > end then {
	        while ptr[1] <= mid do {
	            mrg_list[++i] := list[ptr[1]++];
	        }
	    } 
	}
	for i := 1 to n do {
	    list[start++] = mrg_list[i];
	}
}